import { expect, fixture, html } from '@open-wc/testing';

import '../wc-src/index';

describe('vf-stave', () => {
  it('no attributes renders empty stave', async() => {
    console.log(performance.now());
    const el = await fixture(html`
      <vf-score>
        <vf-stave></vf-stave>
      </vf-score>
    `);

    const expected = '<div id="vf-score"><slot></slot><svg width="500" height="200" viewBox="0 0 500 200" style="width: 500px; height: 200px;"><path stroke-width="1" fill="none" stroke="#999999" stroke-dasharray="none" d="M10 80L410 80"></path><path stroke-width="1" fill="none" stroke="#999999" stroke-dasharray="none" d="M10 90L410 90"></path><path stroke-width="1" fill="none" stroke="#999999" stroke-dasharray="none" d="M10 100L410 100"></path><path stroke-width="1" fill="none" stroke="#999999" stroke-dasharray="none" d="M10 110L410 110"></path><path stroke-width="1" fill="none" stroke="#999999" stroke-dasharray="none" d="M10 120L410 120"></path><rect stroke-width="0.3" fill="black" stroke="black" stroke-dasharray="none" x="10" y="79.5" width="1" height="41"></rect><rect stroke-width="0.3" fill="black" stroke="black" stroke-dasharray="none" x="410" y="79.5" width="1" height="41"></rect></svg></div>'
    const actualTrimmed = el.shadowRoot.innerHTML.replace(/\s/g, '');
    const expectedTrimmed = expected.replace(/\s/g, '');

    expect(actualTrimmed).to.equal(expectedTrimmed);
    console.log(performance.now());

  //   expect(el.shadowRoot.innerHTML).to.equal(`
  // <div id="vf-score">
  //   <slot></slot>
  // <svg width="500" height="200" viewBox="0 0 500 200" style="width: 500px; height: 200px;"><path stroke-width="1" fill="none" stroke="#999999" stroke-dasharray="none" d="M10 80L410 80"></path><path stroke-width="1" fill="none" stroke="#999999" stroke-dasharray="none" d="M10 90L410 90"></path><path stroke-width="1" fill="none" stroke="#999999" stroke-dasharray="none" d="M10 100L410 100"></path><path stroke-width="1" fill="none" stroke="#999999" stroke-dasharray="none" d="M10 110L410 110"></path><path stroke-width="1" fill="none" stroke="#999999" stroke-dasharray="none" d="M10 120L410 120"></path><rect stroke-width="0.3" fill="black" stroke="black" stroke-dasharray="none" x="10" y="79.5" width="1" height="41"></rect><rect stroke-width="0.3" fill="black" stroke="black" stroke-dasharray="none" x="410" y="79.5" width="1" height="41"></rect></svg></div>`);
  });

  it('clef attribute renders the correct clef', async() => {
    const el = await fixture(html`
      <vf-score>
        <vf-stave clef='treble'></vf-stave>
      </vf-score>
    `);

    const expected = '<div id="vf-score"><slot></slot><svg width="500" height="200" viewBox="0 0 500 200" style="width: 500px; height: 200px;"><path stroke-width="1" fill="none" stroke="#999999" stroke-dasharray="none" d="M10 80L410 80"></path><path stroke-width="1" fill="none" stroke="#999999" stroke-dasharray="none" d="M10 90L410 90"></path><path stroke-width="1" fill="none" stroke="#999999" stroke-dasharray="none" d="M10 100L410 100"></path><path stroke-width="1" fill="none" stroke="#999999" stroke-dasharray="none" d="M10 110L410 110"></path><path stroke-width="1" fill="none" stroke="#999999" stroke-dasharray="none" d="M10 120L410 120"></path><rect stroke-width="0.3" fill="black" stroke="black" stroke-dasharray="none" x="10" y="79.5" width="1" height="41"></rect><rect stroke-width="0.3" fill="black" stroke="black" stroke-dasharray="none" x="410" y="79.5" width="1" height="41"></rect><path stroke-width="0.3" fill="black" stroke="none" stroke-dasharray="none" d="M15 111M28.280256 120.199872C29.116608 120.199872,30.079680000000003 120.12384,30.814656 119.971776C31.194816000000003 119.89574400000001,31.270848 119.8704,31.346880000000002 120.301248C31.777728 122.759616,32.335296 125.927616,32.335296 127.651008C32.335296 133.04928,28.685760000000002 133.708224,26.53152 133.708224C24.554688 133.708224,23.61696 133.125312,23.61696 132.643776C23.61696 132.390336,23.946432 132.28896,24.782784 132.010176C25.923264000000003 131.680704,27.215808000000003 130.717632,27.215808000000003 128.588736C27.215808000000003 126.58656,25.948608 124.863168,23.718336 124.863168C21.285312 124.863168,19.81536 126.814656,19.81536 129.070272C19.81536 131.427264,21.234624 135.026112,26.759616 135.026112C29.19264 135.026112,33.931968 133.910976,33.931968 127.72704C33.931968 125.62348800000001,33.27302400000001 122.176704,32.892864 119.89574400000001C32.816832000000005 119.464896,32.842176 119.515584,33.349056000000004 119.287488C37.04928 117.817536,39.482304 114.725568,39.482304 110.594496C39.482304 105.9312,36.060864 101.800128,30.687936 101.800128C29.750208 101.800128,29.750208 101.800128,29.623488000000002 101.141184L28.711104 95.844288C28.660416 95.41344,28.711104 95.388096,28.9392 95.16C32.892864 91.48512,35.883456 86.847168,35.883456 81.246144C35.883456 78.078144,34.996415999999996 74.93548799999999,33.50112 72.75590399999999C32.943552 71.944896,32.005824000000004 70.931136,31.60032 70.931136C31.09344 70.931136,29.95296 71.868864,29.243328 72.67987199999999C26.53152 75.670464,25.64448 80.232384,25.64448 84.033984C25.64448 86.137536,25.923264000000003 88.51987199999999,26.176704 90.015168C26.252736 90.446016,26.278080000000003 90.522048,25.847231999999998 90.902208C20.57568 95.236032,15 100.456896,15 107.832C15 114.168,19.333824 120.199872,28.280256 120.199872M17.91456 110.265024C17.91456 108.110784,18.29472 105.221568,21.310656 101.800128C23.515584 99.367104,25.188288 97.998528,26.886336 96.629952C27.266496 96.325824,27.342528 96.37651199999999,27.41856 96.756672L28.17888 101.445312C28.280256 102.1296,28.280256 102.10425599999999,27.621312000000003 102.307008C24.427968 103.3968,22.324416 106.286016,22.324416 109.403328C22.324416 112.672704,24.047808 115.004352,26.53152 115.866048C26.835648 115.967424,27.266496 116.0688,27.519936 116.0688C27.798720000000003 116.0688,27.950784 115.891392,27.950784 115.663296C27.950784 115.409856,27.672 115.30848,27.41856 115.207104C25.872576000000002 114.54816,24.782784 112.976832,24.782784 111.304128C24.782784 109.200576,26.202048 107.654592,28.43232 107.020992C29.015232 106.868928,29.091264000000002 106.919616,29.167296 107.32512L30.992064 118.19769600000001C31.068096 118.6032,31.017408 118.6032,30.485184000000004 118.704576C29.902272000000004 118.805952,29.167296 118.881984,28.43232 118.881984C22.045632 118.881984,17.91456 115.33382399999999,17.91456 110.265024M32.157888 76.582848C33.349056000000004 76.582848,34.337472000000005 77.571264,34.337472000000005 79.57344C34.337472000000005 83.62848,30.865344 86.9232,28.001472 89.432256C27.748032000000002 89.660352,27.595968 89.609664,27.519936 89.128128C27.367872 88.1904,27.29184 86.948544,27.29184 85.78272C27.29184 80.08032,29.927616 76.582848,32.157888 76.582848M31.09344 106.742208C34.058688000000004 106.995648,36.49171200000001 109.47936,36.49171200000001 112.672704C36.49171200000001 114.979008,35.097792 116.82912,33.070272 117.868224C32.639424000000005 118.070976,32.563392 118.070976,32.48736 117.640128L30.687936 107.249088C30.611904000000003 106.792896,30.662592000000004 106.69152,31.09344 106.742208"></path></svg></div>';
    const actualTrimmed = el.shadowRoot.innerHTML.replace(/\s/g, '');
    const expectedTrimmed = expected.replace(/\s/g, '');

    expect(actualTrimmed).to.equal(expectedTrimmed);

  //   expect(el.shadowRoot.innerHTML).to.equal(`
  // <div id="vf-score">
  //   <slot></slot>
  // <svg width="500" height="200" viewBox="0 0 500 200" style="width: 500px; height: 200px;"><path stroke-width="1" fill="none" stroke="#999999" stroke-dasharray="none" d="M10 80L410 80"></path><path stroke-width="1" fill="none" stroke="#999999" stroke-dasharray="none" d="M10 90L410 90"></path><path stroke-width="1" fill="none" stroke="#999999" stroke-dasharray="none" d="M10 100L410 100"></path><path stroke-width="1" fill="none" stroke="#999999" stroke-dasharray="none" d="M10 110L410 110"></path><path stroke-width="1" fill="none" stroke="#999999" stroke-dasharray="none" d="M10 120L410 120"></path><rect stroke-width="0.3" fill="black" stroke="black" stroke-dasharray="none" x="10" y="79.5" width="1" height="41"></rect><rect stroke-width="0.3" fill="black" stroke="black" stroke-dasharray="none" x="410" y="79.5" width="1" height="41"></rect><path stroke-width="0.3" fill="black" stroke="none" stroke-dasharray="none" d="M15 111M28.280256 120.199872C29.116608 120.199872,30.079680000000003 120.12384,30.814656 119.971776C31.194816000000003 119.89574400000001,31.270848 119.8704,31.346880000000002 120.301248C31.777728 122.759616,32.335296 125.927616,32.335296 127.651008C32.335296 133.04928,28.685760000000002 133.708224,26.53152 133.708224C24.554688 133.708224,23.61696 133.125312,23.61696 132.643776C23.61696 132.390336,23.946432 132.28896,24.782784 132.010176C25.923264000000003 131.680704,27.215808000000003 130.717632,27.215808000000003 128.588736C27.215808000000003 126.58656,25.948608 124.863168,23.718336 124.863168C21.285312 124.863168,19.81536 126.814656,19.81536 129.070272C19.81536 131.427264,21.234624 135.026112,26.759616 135.026112C29.19264 135.026112,33.931968 133.910976,33.931968 127.72704C33.931968 125.62348800000001,33.27302400000001 122.176704,32.892864 119.89574400000001C32.816832000000005 119.464896,32.842176 119.515584,33.349056000000004 119.287488C37.04928 117.817536,39.482304 114.725568,39.482304 110.594496C39.482304 105.9312,36.060864 101.800128,30.687936 101.800128C29.750208 101.800128,29.750208 101.800128,29.623488000000002 101.141184L28.711104 95.844288C28.660416 95.41344,28.711104 95.388096,28.9392 95.16C32.892864 91.48512,35.883456 86.847168,35.883456 81.246144C35.883456 78.078144,34.996415999999996 74.93548799999999,33.50112 72.75590399999999C32.943552 71.944896,32.005824000000004 70.931136,31.60032 70.931136C31.09344 70.931136,29.95296 71.868864,29.243328 72.67987199999999C26.53152 75.670464,25.64448 80.232384,25.64448 84.033984C25.64448 86.137536,25.923264000000003 88.51987199999999,26.176704 90.015168C26.252736 90.446016,26.278080000000003 90.522048,25.847231999999998 90.902208C20.57568 95.236032,15 100.456896,15 107.832C15 114.168,19.333824 120.199872,28.280256 120.199872M17.91456 110.265024C17.91456 108.110784,18.29472 105.221568,21.310656 101.800128C23.515584 99.367104,25.188288 97.998528,26.886336 96.629952C27.266496 96.325824,27.342528 96.37651199999999,27.41856 96.756672L28.17888 101.445312C28.280256 102.1296,28.280256 102.10425599999999,27.621312000000003 102.307008C24.427968 103.3968,22.324416 106.286016,22.324416 109.403328C22.324416 112.672704,24.047808 115.004352,26.53152 115.866048C26.835648 115.967424,27.266496 116.0688,27.519936 116.0688C27.798720000000003 116.0688,27.950784 115.891392,27.950784 115.663296C27.950784 115.409856,27.672 115.30848,27.41856 115.207104C25.872576000000002 114.54816,24.782784 112.976832,24.782784 111.304128C24.782784 109.200576,26.202048 107.654592,28.43232 107.020992C29.015232 106.868928,29.091264000000002 106.919616,29.167296 107.32512L30.992064 118.19769600000001C31.068096 118.6032,31.017408 118.6032,30.485184000000004 118.704576C29.902272000000004 118.805952,29.167296 118.881984,28.43232 118.881984C22.045632 118.881984,17.91456 115.33382399999999,17.91456 110.265024M32.157888 76.582848C33.349056000000004 76.582848,34.337472000000005 77.571264,34.337472000000005 79.57344C34.337472000000005 83.62848,30.865344 86.9232,28.001472 89.432256C27.748032000000002 89.660352,27.595968 89.609664,27.519936 89.128128C27.367872 88.1904,27.29184 86.948544,27.29184 85.78272C27.29184 80.08032,29.927616 76.582848,32.157888 76.582848M31.09344 106.742208C34.058688000000004 106.995648,36.49171200000001 109.47936,36.49171200000001 112.672704C36.49171200000001 114.979008,35.097792 116.82912,33.070272 117.868224C32.639424000000005 118.070976,32.563392 118.070976,32.48736 117.640128L30.687936 107.249088C30.611904000000003 106.792896,30.662592000000004 106.69152,31.09344 106.742208"></path></svg></div>`);
  });

  it('timeSig attribute renders the correct time signature', async() => {
    const el = await fixture(html`
      <vf-score>
        <vf-stave timeSig='4/4'></vf-stave>
      </vf-score>
    `);

    const expected = '<div id="vf-score"><slot></slot><svg width="500" height="200" viewBox="0 0 500 200" style="width: 500px; height: 200px;"><path stroke-width="1" fill="none" stroke="#999999" stroke-dasharray="none" d="M10 80L410 80"></path><path stroke-width="1" fill="none" stroke="#999999" stroke-dasharray="none" d="M10 90L410 90"></path><path stroke-width="1" fill="none" stroke="#999999" stroke-dasharray="none" d="M10 100L410 100"></path><path stroke-width="1" fill="none" stroke="#999999" stroke-dasharray="none" d="M10 110L410 110"></path><path stroke-width="1" fill="none" stroke="#999999" stroke-dasharray="none" d="M10 120L410 120"></path><rect stroke-width="0.3" fill="black" stroke="black" stroke-dasharray="none" x="10" y="79.5" width="1" height="41"></rect><rect stroke-width="0.3" fill="black" stroke="black" stroke-dasharray="none" x="410" y="79.5" width="1" height="41"></rect><path stroke-width="0.3" fill="black" stroke="none" stroke-dasharray="none" d="M15 90M16.41984 93.94128L22.956 93.94128L22.956 96.16896C22.956 97.12368,22.197119999999998 97.39296,21.56064 97.39296C20.9976 97.39296,20.7528 97.7112,20.7528 98.0784C20.7528 98.42112,20.8752 98.8128,21.41376 98.8128L28.929119999999998 98.8128C29.271839999999997 98.8128,29.63904 98.568,29.63904 98.0784C29.63904 97.58879999999999,29.1984 97.36848,28.85568 97.36848C28.51296 97.36848,27.75408 97.14816,27.75408 96.02208L27.75408 93.94128L30.32448 93.94128C30.691679999999998 93.94128,30.863039999999998 93.69648,30.863039999999998 93.28032C30.863039999999998 92.86416,30.71616 92.61936,30.32448 92.61936L27.75408 92.61936L27.75408 85.05504C27.75408 84.78576,27.729599999999998 84.46752000000001,27.337919999999997 84.46752000000001C27.01968 84.46752000000001,26.84832 84.54096,26.628 84.78576L23.27424 88.82496C23.15184 89.0208,22.956 89.21664,22.956 89.65728L22.956 92.61936L18.206879999999998 92.61936C21.02208 90.22032,26.67696 82.21536,26.77488 81.82368C26.77488 81.75024,26.79936 81.72576000000001,26.79936 81.65232C26.79936 81.35856,26.55456 81.16272000000001,26.28528 81.16272000000001C25.967039999999997 81.16272000000001,24.52272 81.21168,23.88624 81.21168C23.249760000000002 81.21168,21.65856 81.16272000000001,21.38928 81.16272000000001C21.07104 81.16272000000001,20.58144 81.26064,20.58144 81.82368C20.58144 86.18112,17.10528 91.1016,16.05264 92.5704L15.8568 92.86416C15.8568 92.88864,15.80784 92.9376,15.80784 92.96208C15.7344 93.10896,15.70992 93.23136,15.70992 93.35376C15.70992 93.69648,15.9792 93.94128,16.41984 93.94128"></path><path stroke-width="0.3" fill="black" stroke="none" stroke-dasharray="none" d="M15 110M16.41984 113.94128L22.956 113.94128L22.956 116.16896C22.956 117.12368,22.197119999999998 117.39296,21.56064 117.39296C20.9976 117.39296,20.7528 117.7112,20.7528 118.0784C20.7528 118.42112,20.8752 118.8128,21.41376 118.8128L28.929119999999998 118.8128C29.271839999999997 118.8128,29.63904 118.568,29.63904 118.0784C29.63904 117.58879999999999,29.1984 117.36848,28.85568 117.36848C28.51296 117.36848,27.75408 117.14816,27.75408 116.02208L27.75408 113.94128L30.32448 113.94128C30.691679999999998 113.94128,30.863039999999998 113.69648,30.863039999999998 113.28032C30.863039999999998 112.86416,30.71616 112.61936,30.32448 112.61936L27.75408 112.61936L27.75408 105.05504C27.75408 104.78576,27.729599999999998 104.46752000000001,27.337919999999997 104.46752000000001C27.01968 104.46752000000001,26.84832 104.54096,26.628 104.78576L23.27424 108.82496C23.15184 109.0208,22.956 109.21664,22.956 109.65728L22.956 112.61936L18.206879999999998 112.61936C21.02208 110.22032,26.67696 102.21536,26.77488 101.82368C26.77488 101.75024,26.79936 101.72576000000001,26.79936 101.65232C26.79936 101.35856,26.55456 101.16272000000001,26.28528 101.16272000000001C25.967039999999997 101.16272000000001,24.52272 101.21168,23.88624 101.21168C23.249760000000002 101.21168,21.65856 101.16272000000001,21.38928 101.16272000000001C21.07104 101.16272000000001,20.58144 101.26064,20.58144 101.82368C20.58144 106.18112,17.10528 111.1016,16.05264 112.5704L15.8568 112.86416C15.8568 112.88864,15.80784 112.9376,15.80784 112.96208C15.7344 113.10896,15.70992 113.23136,15.70992 113.35376C15.70992 113.69648,15.9792 113.94128,16.41984 113.94128"></path></svg></div>';
    const actualTrimmed = el.shadowRoot.innerHTML.replace(/\s/g, '');
    const expectedTrimmed = expected.replace(/\s/g, '');

    expect(actualTrimmed).to.equal(expectedTrimmed);
  });

  it('keySig attribute renders the correct key signature', async() => {
    const el = await fixture(html`
      <vf-score>
        <vf-stave keySig='Bb'></vf-stave>
      </vf-score>
    `);

    const expected = '<div id="vf-score"><slot></slot><svg width="500" height="200" viewBox="0 0 500 200" style="width: 500px; height: 200px;"><path stroke-width="1" fill="none" stroke="#999999" stroke-dasharray="none" d="M10 80L410 80"></path><path stroke-width="1" fill="none" stroke="#999999" stroke-dasharray="none" d="M10 90L410 90"></path><path stroke-width="1" fill="none" stroke="#999999" stroke-dasharray="none" d="M10 100L410 100"></path><path stroke-width="1" fill="none" stroke="#999999" stroke-dasharray="none" d="M10 110L410 110"></path><path stroke-width="1" fill="none" stroke="#999999" stroke-dasharray="none" d="M10 120L410 120"></path><rect stroke-width="0.3" fill="black" stroke="black" stroke-dasharray="none" x="10" y="79.5" width="1" height="41"></rect><rect stroke-width="0.3" fill="black" stroke="black" stroke-dasharray="none" x="410" y="79.5" width="1" height="41"></rect><path stroke-width="0.3" fill="black" stroke="none" stroke-dasharray="none" d="M15 100M15.46512 106.7032C15.60192 106.86736,15.711359999999999 106.89472,15.8208 106.89472C15.9576 106.89472,16.06704 106.81264,16.06704 106.81264C17.24352 106.156,18.20112 105.08896,19.18608 104.40496C22.68816 101.96992,23.892 99.56224,23.892 97.75648C23.892 95.51296,22.16832 94.09024,20.362560000000002 93.9808C19.67856 93.9808,18.74832 94.28176,18.20112 94.63744C17.95488 94.82896,17.51712 95.18464,17.3256 95.18464C17.24352 95.18464,17.21616 95.18464,17.13408 95.15728C16.86048 95.04784,16.69632 94.74688,16.69632 94.47328C16.72368 93.62512,16.96992 84.15856,16.96992 83.36512C16.96992 82.92736,16.61424 82.70848000000001,16.2312 82.70848000000001C15.65664 82.70848000000001,15.02736 83.09152,15 83.80288C15 83.80288,15.16416 106.2928,15.46512 106.7032M16.80576 98.00272C17.07936 97.20928,18.66624 96.06016,19.569119999999998 96.06016C20.71824 96.06016,21.18336 97.37344,21.18336 98.3584C21.18336 100.46512,19.3776 102.5992,17.68128 103.66624C17.51712 103.74832,17.40768 103.77568,17.29824 103.77568C16.94256 103.77568,16.86048 103.39264,16.86048 103.20112C16.86048 103.20112,16.72368 100.8208,16.72368 99.26128C16.72368 98.632,16.7784 98.13952,16.80576 98.00272"></path><path stroke-width="0.3" fill="black" stroke="none" stroke-dasharray="none" d="M24.892 85M25.35712 91.7032C25.49392 91.86736,25.60336 91.89472,25.712799999999998 91.89472C25.8496 91.89472,25.959039999999998 91.81264,25.959039999999998 91.81264C27.13552 91.156,28.09312 90.08896,29.07808 89.40496C32.58016 86.96992,33.784 84.56224,33.784 82.75648C33.784 80.51296,32.06032 79.09024,30.254559999999998 78.9808C29.57056 78.9808,28.64032 79.28176,28.09312 79.63744C27.84688 79.82896,27.409119999999998 80.18464,27.2176 80.18464C27.13552 80.18464,27.108159999999998 80.18464,27.02608 80.15728C26.75248 80.04784,26.58832 79.74688,26.58832 79.47328C26.615679999999998 78.62512,26.861919999999998 69.15856,26.861919999999998 68.36512C26.861919999999998 67.92736,26.50624 67.70848000000001,26.1232 67.70848000000001C25.54864 67.70848000000001,24.91936 68.09152,24.892 68.80288C24.892 68.80288,25.05616 91.2928,25.35712 91.7032M26.69776 83.00272C26.97136 82.20928,28.558239999999998 81.06016,29.46112 81.06016C30.610239999999997 81.06016,31.07536 82.37344,31.07536 83.3584C31.07536 85.46512,29.2696 87.5992,27.57328 88.66624C27.409119999999998 88.74832,27.29968 88.77568,27.19024 88.77568C26.83456 88.77568,26.75248 88.39264,26.75248 88.20112C26.75248 88.20112,26.615679999999998 85.8208,26.615679999999998 84.26128C26.615679999999998 83.632,26.6704 83.13952,26.69776 83.00272"></path></svg></div>';
    const actualTrimmed = el.shadowRoot.innerHTML.replace(/\s/g, '');
    const expectedTrimmed = expected.replace(/\s/g, '');

    expect(actualTrimmed).to.equal(expectedTrimmed);
  });

  it('stem down simple', async() =>  {
    const el = await fixture(html`
      <vf-score>
        <vf-stave clef='treble' keySig='C'>
          <vf-voice stem='down'>C5/q, D5, E5, F5</vf-voice>
        </vf-stave>
      </vf-score>
    `); 

    const expected = '<div id="vf-score"><slot></slot><svg width="500" height="200" viewBox="0 0 500 200" style="width: 500px; height: 200px;"><path stroke-width="1" fill="none" stroke="#999999" stroke-dasharray="none" d="M10 80L410 80"></path><path stroke-width="1" fill="none" stroke="#999999" stroke-dasharray="none" d="M10 90L410 90"></path><path stroke-width="1" fill="none" stroke="#999999" stroke-dasharray="none" d="M10 100L410 100"></path><path stroke-width="1" fill="none" stroke="#999999" stroke-dasharray="none" d="M10 110L410 110"></path><path stroke-width="1" fill="none" stroke="#999999" stroke-dasharray="none" d="M10 120L410 120"></path><rect stroke-width="0.3" fill="black" stroke="black" stroke-dasharray="none" x="10" y="79.5" width="1" height="41"></rect><rect stroke-width="0.3" fill="black" stroke="black" stroke-dasharray="none" x="410" y="79.5" width="1" height="41"></rect><path stroke-width="0.3" fill="black" stroke="none" stroke-dasharray="none" d="M15 111M28.280256 120.199872C29.116608 120.199872,30.079680000000003 120.12384,30.814656 119.971776C31.194816000000003 119.89574400000001,31.270848 119.8704,31.346880000000002 120.301248C31.777728 122.759616,32.335296 125.927616,32.335296 127.651008C32.335296 133.04928,28.685760000000002 133.708224,26.53152 133.708224C24.554688 133.708224,23.61696 133.125312,23.61696 132.643776C23.61696 132.390336,23.946432 132.28896,24.782784 132.010176C25.923264000000003 131.680704,27.215808000000003 130.717632,27.215808000000003 128.588736C27.215808000000003 126.58656,25.948608 124.863168,23.718336 124.863168C21.285312 124.863168,19.81536 126.814656,19.81536 129.070272C19.81536 131.427264,21.234624 135.026112,26.759616 135.026112C29.19264 135.026112,33.931968 133.910976,33.931968 127.72704C33.931968 125.62348800000001,33.27302400000001 122.176704,32.892864 119.89574400000001C32.816832000000005 119.464896,32.842176 119.515584,33.349056000000004 119.287488C37.04928 117.817536,39.482304 114.725568,39.482304 110.594496C39.482304 105.9312,36.060864 101.800128,30.687936 101.800128C29.750208 101.800128,29.750208 101.800128,29.623488000000002 101.141184L28.711104 95.844288C28.660416 95.41344,28.711104 95.388096,28.9392 95.16C32.892864 91.48512,35.883456 86.847168,35.883456 81.246144C35.883456 78.078144,34.996415999999996 74.93548799999999,33.50112 72.75590399999999C32.943552 71.944896,32.005824000000004 70.931136,31.60032 70.931136C31.09344 70.931136,29.95296 71.868864,29.243328 72.67987199999999C26.53152 75.670464,25.64448 80.232384,25.64448 84.033984C25.64448 86.137536,25.923264000000003 88.51987199999999,26.176704 90.015168C26.252736 90.446016,26.278080000000003 90.522048,25.847231999999998 90.902208C20.57568 95.236032,15 100.456896,15 107.832C15 114.168,19.333824 120.199872,28.280256 120.199872M17.91456 110.265024C17.91456 108.110784,18.29472 105.221568,21.310656 101.800128C23.515584 99.367104,25.188288 97.998528,26.886336 96.629952C27.266496 96.325824,27.342528 96.37651199999999,27.41856 96.756672L28.17888 101.445312C28.280256 102.1296,28.280256 102.10425599999999,27.621312000000003 102.307008C24.427968 103.3968,22.324416 106.286016,22.324416 109.403328C22.324416 112.672704,24.047808 115.004352,26.53152 115.866048C26.835648 115.967424,27.266496 116.0688,27.519936 116.0688C27.798720000000003 116.0688,27.950784 115.891392,27.950784 115.663296C27.950784 115.409856,27.672 115.30848,27.41856 115.207104C25.872576000000002 114.54816,24.782784 112.976832,24.782784 111.304128C24.782784 109.200576,26.202048 107.654592,28.43232 107.020992C29.015232 106.868928,29.091264000000002 106.919616,29.167296 107.32512L30.992064 118.19769600000001C31.068096 118.6032,31.017408 118.6032,30.485184000000004 118.704576C29.902272000000004 118.805952,29.167296 118.881984,28.43232 118.881984C22.045632 118.881984,17.91456 115.33382399999999,17.91456 110.265024M32.157888 76.582848C33.349056000000004 76.582848,34.337472000000005 77.571264,34.337472000000005 79.57344C34.337472000000005 83.62848,30.865344 86.9232,28.001472 89.432256C27.748032000000002 89.660352,27.595968 89.609664,27.519936 89.128128C27.367872 88.1904,27.29184 86.948544,27.29184 85.78272C27.29184 80.08032,29.927616 76.582848,32.157888 76.582848M31.09344 106.742208C34.058688000000004 106.995648,36.49171200000001 109.47936,36.49171200000001 112.672704C36.49171200000001 114.979008,35.097792 116.82912,33.070272 117.868224C32.639424000000005 118.070976,32.563392 118.070976,32.48736 117.640128L30.687936 107.249088C30.611904000000003 106.792896,30.662592000000004 106.69152,31.09344 106.742208"></path><path stroke-width="1" fill="none" stroke="#999999" stroke-dasharray="none" d="M10 80L410 80"></path><path stroke-width="1" fill="none" stroke="#999999" stroke-dasharray="none" d="M10 90L410 90"></path><path stroke-width="1" fill="none" stroke="#999999" stroke-dasharray="none" d="M10 100L410 100"></path><path stroke-width="1" fill="none" stroke="#999999" stroke-dasharray="none" d="M10 110L410 110"></path><path stroke-width="1" fill="none" stroke="#999999" stroke-dasharray="none" d="M10 120L410 120"></path><rect stroke-width="0.3" fill="black" stroke="black" stroke-dasharray="none" x="10" y="79.5" width="1" height="41"></rect><rect stroke-width="0.3" fill="black" stroke="black" stroke-dasharray="none" x="410" y="79.5" width="1" height="41"></rect><path stroke-width="0.3" fill="black" stroke="none" stroke-dasharray="none" d="M15 111M28.280256 120.199872C29.116608 120.199872,30.079680000000003 120.12384,30.814656 119.971776C31.194816000000003 119.89574400000001,31.270848 119.8704,31.346880000000002 120.301248C31.777728 122.759616,32.335296 125.927616,32.335296 127.651008C32.335296 133.04928,28.685760000000002 133.708224,26.53152 133.708224C24.554688 133.708224,23.61696 133.125312,23.61696 132.643776C23.61696 132.390336,23.946432 132.28896,24.782784 132.010176C25.923264000000003 131.680704,27.215808000000003 130.717632,27.215808000000003 128.588736C27.215808000000003 126.58656,25.948608 124.863168,23.718336 124.863168C21.285312 124.863168,19.81536 126.814656,19.81536 129.070272C19.81536 131.427264,21.234624 135.026112,26.759616 135.026112C29.19264 135.026112,33.931968 133.910976,33.931968 127.72704C33.931968 125.62348800000001,33.27302400000001 122.176704,32.892864 119.89574400000001C32.816832000000005 119.464896,32.842176 119.515584,33.349056000000004 119.287488C37.04928 117.817536,39.482304 114.725568,39.482304 110.594496C39.482304 105.9312,36.060864 101.800128,30.687936 101.800128C29.750208 101.800128,29.750208 101.800128,29.623488000000002 101.141184L28.711104 95.844288C28.660416 95.41344,28.711104 95.388096,28.9392 95.16C32.892864 91.48512,35.883456 86.847168,35.883456 81.246144C35.883456 78.078144,34.996415999999996 74.93548799999999,33.50112 72.75590399999999C32.943552 71.944896,32.005824000000004 70.931136,31.60032 70.931136C31.09344 70.931136,29.95296 71.868864,29.243328 72.67987199999999C26.53152 75.670464,25.64448 80.232384,25.64448 84.033984C25.64448 86.137536,25.923264000000003 88.51987199999999,26.176704 90.015168C26.252736 90.446016,26.278080000000003 90.522048,25.847231999999998 90.902208C20.57568 95.236032,15 100.456896,15 107.832C15 114.168,19.333824 120.199872,28.280256 120.199872M17.91456 110.265024C17.91456 108.110784,18.29472 105.221568,21.310656 101.800128C23.515584 99.367104,25.188288 97.998528,26.886336 96.629952C27.266496 96.325824,27.342528 96.37651199999999,27.41856 96.756672L28.17888 101.445312C28.280256 102.1296,28.280256 102.10425599999999,27.621312000000003 102.307008C24.427968 103.3968,22.324416 106.286016,22.324416 109.403328C22.324416 112.672704,24.047808 115.004352,26.53152 115.866048C26.835648 115.967424,27.266496 116.0688,27.519936 116.0688C27.798720000000003 116.0688,27.950784 115.891392,27.950784 115.663296C27.950784 115.409856,27.672 115.30848,27.41856 115.207104C25.872576000000002 114.54816,24.782784 112.976832,24.782784 111.304128C24.782784 109.200576,26.202048 107.654592,28.43232 107.020992C29.015232 106.868928,29.091264000000002 106.919616,29.167296 107.32512L30.992064 118.19769600000001C31.068096 118.6032,31.017408 118.6032,30.485184000000004 118.704576C29.902272000000004 118.805952,29.167296 118.881984,28.43232 118.881984C22.045632 118.881984,17.91456 115.33382399999999,17.91456 110.265024M32.157888 76.582848C33.349056000000004 76.582848,34.337472000000005 77.571264,34.337472000000005 79.57344C34.337472000000005 83.62848,30.865344 86.9232,28.001472 89.432256C27.748032000000002 89.660352,27.595968 89.609664,27.519936 89.128128C27.367872 88.1904,27.29184 86.948544,27.29184 85.78272C27.29184 80.08032,29.927616 76.582848,32.157888 76.582848M31.09344 106.742208C34.058688000000004 106.995648,36.49171200000001 109.47936,36.49171200000001 112.672704C36.49171200000001 114.979008,35.097792 116.82912,33.070272 117.868224C32.639424000000005 118.070976,32.563392 118.070976,32.48736 117.640128L30.687936 107.249088C30.611904000000003 106.792896,30.662592000000004 106.69152,31.09344 106.742208"></path><g class="vf-stavenote" id="vf-auto1158"><g class="vf-note" pointer-events="bounding-box"><g class="vf-stem" pointer-events="bounding-box"><path stroke-width="1.5" fill="none" stroke="black" stroke-dasharray="none" d="M53.75 97L53.75 130"></path></g><g class="vf-notehead" pointer-events="bounding-box"><path stroke-width="0.3" fill="black" stroke="none" stroke-dasharray="none" d="M53 95M53 96.6848C53 98.7908,54.74096 100.0544,56.9312 100.0544C60.52544 100.0544,64.934 96.74096,64.934 93.3152C64.934 91.23728,63.30536 89.9456,61.0028 89.9456C56.566159999999996 89.9456,53 93.23096,53 96.6848"></path></g></g><g class="vf-modifiers"></g></g><g class="vf-stavenote" id="vf-auto1166"><g class="vf-note" pointer-events="bounding-box"><g class="vf-stem" pointer-events="bounding-box"><path stroke-width="1.5" fill="none" stroke="black" stroke-dasharray="none" d="M140.5165 92L140.5165 125"></path></g><g class="vf-notehead" pointer-events="bounding-box"><path stroke-width="0.3" fill="black" stroke="none" stroke-dasharray="none" d="M139.7665 90M139.7665 91.6848C139.7665 93.7908,141.50746 95.0544,143.6977 95.0544C147.29194 95.0544,151.7005 91.74096,151.7005 88.3152C151.7005 86.23728,150.07186000000002 84.9456,147.76930000000002 84.9456C143.33266 84.9456,139.7665 88.23096,139.7665 91.6848"></path></g></g><g class="vf-modifiers"></g></g><g class="vf-stavenote" id="vf-auto1174"><g class="vf-note" pointer-events="bounding-box"><g class="vf-stem" pointer-events="bounding-box"><path stroke-width="1.5" fill="none" stroke="black" stroke-dasharray="none" d="M227.28299999999996 87L227.28299999999996 120"></path></g><g class="vf-notehead" pointer-events="bounding-box"><path stroke-width="0.3" fill="black" stroke="none" stroke-dasharray="none" d="M226.53299999999996 85M226.53299999999996 86.6848C226.53299999999996 88.7908,228.27395999999996 90.0544,230.46419999999995 90.0544C234.05843999999996 90.0544,238.46699999999996 86.74096,238.46699999999996 83.3152C238.46699999999996 81.23728,236.83835999999997 79.9456,234.53579999999997 79.9456C230.09915999999996 79.9456,226.53299999999996 83.23096,226.53299999999996 86.6848"></path></g></g><g class="vf-modifiers"></g></g><g class="vf-stavenote" id="vf-auto1182"><g class="vf-note" pointer-events="bounding-box"><g class="vf-stem" pointer-events="bounding-box"><path stroke-width="1.5" fill="none" stroke="black" stroke-dasharray="none" d="M314.04949999999997 82L314.04949999999997 115"></path></g><g class="vf-notehead" pointer-events="bounding-box"><path stroke-width="0.3" fill="black" stroke="none" stroke-dasharray="none" d="M313.29949999999997 80M313.29949999999997 81.6848C313.29949999999997 83.7908,315.04045999999994 85.0544,317.23069999999996 85.0544C320.82493999999997 85.0544,325.2335 81.74096,325.2335 78.3152C325.2335 76.23728,323.60486 74.9456,321.30229999999995 74.9456C316.86566 74.9456,313.29949999999997 78.23096,313.29949999999997 81.6848"></path></g></g><g class="vf-modifiers"></g></g></svg></div>';
    const actualTrimmed = el.shadowRoot.innerHTML.replace(/\s/g, '');
    const expectedTrimmed = expected.replace(/\s/g, '');

    expect(actualTrimmed).to.equal(expectedTrimmed);
  });
})